/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/velero-plugin-for-vsphere/pkg/apis/backupdriver/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupRepositoryClaimLister helps list BackupRepositoryClaims.
// All objects returned here must be treated as read-only.
type BackupRepositoryClaimLister interface {
	// List lists all BackupRepositoryClaims in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackupRepositoryClaim, err error)
	// BackupRepositoryClaims returns an object that can list and get BackupRepositoryClaims.
	BackupRepositoryClaims(namespace string) BackupRepositoryClaimNamespaceLister
	BackupRepositoryClaimListerExpansion
}

// backupRepositoryClaimLister implements the BackupRepositoryClaimLister interface.
type backupRepositoryClaimLister struct {
	indexer cache.Indexer
}

// NewBackupRepositoryClaimLister returns a new BackupRepositoryClaimLister.
func NewBackupRepositoryClaimLister(indexer cache.Indexer) BackupRepositoryClaimLister {
	return &backupRepositoryClaimLister{indexer: indexer}
}

// List lists all BackupRepositoryClaims in the indexer.
func (s *backupRepositoryClaimLister) List(selector labels.Selector) (ret []*v1alpha1.BackupRepositoryClaim, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupRepositoryClaim))
	})
	return ret, err
}

// BackupRepositoryClaims returns an object that can list and get BackupRepositoryClaims.
func (s *backupRepositoryClaimLister) BackupRepositoryClaims(namespace string) BackupRepositoryClaimNamespaceLister {
	return backupRepositoryClaimNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupRepositoryClaimNamespaceLister helps list and get BackupRepositoryClaims.
// All objects returned here must be treated as read-only.
type BackupRepositoryClaimNamespaceLister interface {
	// List lists all BackupRepositoryClaims in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackupRepositoryClaim, err error)
	// Get retrieves the BackupRepositoryClaim from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackupRepositoryClaim, error)
	BackupRepositoryClaimNamespaceListerExpansion
}

// backupRepositoryClaimNamespaceLister implements the BackupRepositoryClaimNamespaceLister
// interface.
type backupRepositoryClaimNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupRepositoryClaims in the indexer for a given namespace.
func (s backupRepositoryClaimNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackupRepositoryClaim, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupRepositoryClaim))
	})
	return ret, err
}

// Get retrieves the BackupRepositoryClaim from the indexer for a given namespace and name.
func (s backupRepositoryClaimNamespaceLister) Get(name string) (*v1alpha1.BackupRepositoryClaim, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backuprepositoryclaim"), name)
	}
	return obj.(*v1alpha1.BackupRepositoryClaim), nil
}
