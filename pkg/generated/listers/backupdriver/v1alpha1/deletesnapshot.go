/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/velero-plugin-for-vsphere/pkg/apis/backupdriver/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeleteSnapshotLister helps list DeleteSnapshots.
// All objects returned here must be treated as read-only.
type DeleteSnapshotLister interface {
	// List lists all DeleteSnapshots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeleteSnapshot, err error)
	// DeleteSnapshots returns an object that can list and get DeleteSnapshots.
	DeleteSnapshots(namespace string) DeleteSnapshotNamespaceLister
	DeleteSnapshotListerExpansion
}

// deleteSnapshotLister implements the DeleteSnapshotLister interface.
type deleteSnapshotLister struct {
	indexer cache.Indexer
}

// NewDeleteSnapshotLister returns a new DeleteSnapshotLister.
func NewDeleteSnapshotLister(indexer cache.Indexer) DeleteSnapshotLister {
	return &deleteSnapshotLister{indexer: indexer}
}

// List lists all DeleteSnapshots in the indexer.
func (s *deleteSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.DeleteSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeleteSnapshot))
	})
	return ret, err
}

// DeleteSnapshots returns an object that can list and get DeleteSnapshots.
func (s *deleteSnapshotLister) DeleteSnapshots(namespace string) DeleteSnapshotNamespaceLister {
	return deleteSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeleteSnapshotNamespaceLister helps list and get DeleteSnapshots.
// All objects returned here must be treated as read-only.
type DeleteSnapshotNamespaceLister interface {
	// List lists all DeleteSnapshots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeleteSnapshot, err error)
	// Get retrieves the DeleteSnapshot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DeleteSnapshot, error)
	DeleteSnapshotNamespaceListerExpansion
}

// deleteSnapshotNamespaceLister implements the DeleteSnapshotNamespaceLister
// interface.
type deleteSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeleteSnapshots in the indexer for a given namespace.
func (s deleteSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeleteSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeleteSnapshot))
	})
	return ret, err
}

// Get retrieves the DeleteSnapshot from the indexer for a given namespace and name.
func (s deleteSnapshotNamespaceLister) Get(name string) (*v1alpha1.DeleteSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("deletesnapshot"), name)
	}
	return obj.(*v1alpha1.DeleteSnapshot), nil
}
