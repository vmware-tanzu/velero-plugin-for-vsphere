/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/velero-plugin-for-vsphere/pkg/apis/backupdriver/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupRepositoryLister helps list BackupRepositories.
// All objects returned here must be treated as read-only.
type BackupRepositoryLister interface {
	// List lists all BackupRepositories in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackupRepository, err error)
	// Get retrieves the BackupRepository from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackupRepository, error)
	BackupRepositoryListerExpansion
}

// backupRepositoryLister implements the BackupRepositoryLister interface.
type backupRepositoryLister struct {
	indexer cache.Indexer
}

// NewBackupRepositoryLister returns a new BackupRepositoryLister.
func NewBackupRepositoryLister(indexer cache.Indexer) BackupRepositoryLister {
	return &backupRepositoryLister{indexer: indexer}
}

// List lists all BackupRepositories in the indexer.
func (s *backupRepositoryLister) List(selector labels.Selector) (ret []*v1alpha1.BackupRepository, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupRepository))
	})
	return ret, err
}

// Get retrieves the BackupRepository from the index for a given name.
func (s *backupRepositoryLister) Get(name string) (*v1alpha1.BackupRepository, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backuprepository"), name)
	}
	return obj.(*v1alpha1.BackupRepository), nil
}
